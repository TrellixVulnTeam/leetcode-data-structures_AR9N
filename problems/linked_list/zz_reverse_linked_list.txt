https://leetcode.com/problems/reverse-linked-list/

Reverse a singly linked list.

Example:

Input:  1->2->3->NULL
Output: 3->2->1->NULL

Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?

Notes:
------
Linked Lists is a series of Linked Nodes
Linked Node instance contains instance variables which include a pointer to another Linked Node instance
Head refers to the instance variable - int val of the linked node

Solution (Iterative):
--------
- The output will be a ListNode with an input of ListNode head
public static ListNode reverseList(ListNode head) {}
- We will use three pointers:
    - Previous (prev)
    - Current (curr)
    - Next (next)
- For initialization, we want to set prev = null and curr = head
    - prev = null because the first ListNode pointer will point to null
    - curr = head because the head is the current instance variable of int val of the input ListNode
- We will traverse through each ListNode to move the pointers to the opposite direction
- Traversing will end once our curr node reaches the end of the linked list of value NULL
- During this loop while (curr != null)
    - We set next = curr.next to initiate traversal of the list
    - We set curr.next = prev allowing our current next pointer to point to the previous node
    - We then advance prev and curr

1  ) [1, ] -> [2, ] -> [3,X]
      c                        p = null
2.A) [1, ] -> [2, ] -> [3,X]
               n
2.B) [1,X]    [2, ] -> [3,X]  c.n = p
2.C) [1,X]    [2, ] -> [3,X]
      p        c
3.A) [1,X]    [2, ] -> [3,X]
                        n
3.B) [1,X] <- [2, ] -> [3,X]  c.n = p
3.C) [1,X] <- [2, ] -> [3,X]
               p        c
4.A) [1,X] <- [2, ] -> [3,X]
                          n
4.B) [1,X] <- [2, ] <- [3,X]  c.n = p
4.C) [1,X] <- [2, ] <- [3,X]
                        p c
5  ) [3, ] -> [2, ] -> [1,X]
At this point, current = null, return prev = 3
Therefore,  node.val = 3
            node.next.val = 2
            node.next.next.val = 3
            node.next.next.next = null